defmodule IconGenerator do
  @output_file "assets/css/icons.css"
  @api_base_url "https://api.github.com/repos/tailwindlabs/heroicons/contents/optimized"
  @headers [{~c"User-Agent", ~c"aurora_uix_icons"}, {~c"accept", ~c"application/vnd.github+json"}]

  def run do
    :inets.start()
    # Jason is a dependency of Phoenix, so it should be available.
    # If not, add {:jason, "~> 1.2"} to mix.exs
    Application.ensure_all_started(:jason)

    tasks =
      for {suffix, directory} <- icon_sets() do
        Task.async(fn ->
          IO.puts("Fetching icon list for #{directory}...")
          fetch_and_process_icons(suffix, directory)
        end)
      end

    css_rules = Task.await_many(tasks, :infinity) |> List.flatten()

    File.write!(@output_file, "/* Generated by a script. Do not edit. */\n" <> Enum.join(css_rules, "\n"))

    IO.puts("Generated #{length(css_rules)} icon classes in #{@output_file}")
  end

  defp icon_sets do
    [
      {"", "/24/outline"},
      {"-solid", "/24/solid"},
      {"-mini", "/20/solid"},
      {"-micro", "/16/solid"}
    ]
  end

  defp fetch_and_process_icons(suffix, directory) do
    api_url = @api_base_url <> directory

    case :httpc.request(:get, {to_charlist(api_url), @headers}, [], []) do
      {:ok, {{_, 200, _}, _, body}} ->
        icon_files =
          Jason.decode!(body)
          |> Enum.filter(&(&1["type"] == "file" && String.ends_with?(&1["name"], ".svg")))
          |> Enum.map(&%{name: &1["name"], raw_icon_url: &1["download_url"]})

        icon_tasks =
          for %{name: filename, raw_icon_url: raw_icon_url} <- icon_files do
            Task.async(fn ->
              fetch_and_generate_css(raw_icon_url, filename, suffix)
            end)
          end

        Task.await_many(icon_tasks, :infinity)

      {:ok, {{_, 404, _}, _, _}} ->
        IO.puts(:stderr, "Error: 404 Not Found for #{api_url}. The Heroicons repository structure may have changed.")
        []

      {:error, reason} ->
        IO.puts(:stderr, "Error: Failed to fetch icon list from #{api_url}: #{inspect(reason)}")
        []
    end
  end

  defp fetch_and_generate_css(url, filename, suffix) do
    case :httpc.request(:get, {to_charlist(url), @headers}, [], []) do
      {:ok, {{_, 200, _}, _, body}} ->
        name = Path.basename(filename, ".svg") <> suffix
        content = to_string(body) |> String.replace(~r/\r\n|\n/, "")
        encoded_content = URI.encode_www_form(content)

        """
        .hero-#{name} {
          -webkit-mask: url('data:image/svg+xml,#{encoded_content}');
          mask: url('data:image/svg+xml,#{encoded_content}');
          mask-repeat: no-repeat;
          background-color: currentColor;
          vertical-align: middle;
          display: inline-block;
          width: #{icon_size(name)};
          height: #{icon_size(name)};
        }
        """

      {:error, reason} ->
        IO.puts(:stderr, "Error: Failed to fetch icon #{url}: #{inspect(reason)}")
        ""
    end
  end

  defp icon_size(name) do
    cond do
      String.ends_with?(name, "-mini") -> "1.25rem"
      String.ends_with?(name, "-micro") -> "1.0rem"
      true -> "1.5rem"
    end
  end
end

IconGenerator.run()
